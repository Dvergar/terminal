// Generated by LiveScript 1.2.0
(function(){
  var split$ = ''.split;
  $(document).ready(function(){
    var fs, path, spawn, ext_imgs, content, input, prefix, preview, command;
    fs = require('fs');
    path = require('path');
    spawn = require('cross-spawn').spawn;
    ext_imgs = ['.jpg', '.gif', '.png', '.PNG'];
    content = $('#content');
    input = $('#input');
    prefix = $('.ok');
    preview = $('#preview');
    command = commandDefault;
    function updateInput(path){
      var levels, oldwidth, i$, len$, level, newwidth;
      levels = split$.call(path, "\\");
      oldwidth = prefix.width();
      prefix.html("");
      for (i$ = 0, len$ = levels.length; i$ < len$; ++i$) {
        level = levels[i$];
        prefix.append('<span class="level">' + level + "</span>");
      }
      prefix.css('width', 'auto');
      newwidth = prefix.width();
      prefix.css('width', oldwidth);
      prefix.animate({
        width: newwidth
      }, 100);
      return console.log('workingdirectory' + process.cwd());
    }
    function commandDefault(text){
      var args, files, elresult, i$, len$, file, icon_image, cls, ext, prep, elem, app;
      console.log('command_' + text);
      content.append('<p class="command">' + text + '</p>');
      args = split$.call(text, " ");
      if (args[0] === 'ls') {
        files = fs.readdirSync(process.cwd());
        elresult = $('<p class="result"></p>');
        content.append(elresult);
        for (i$ = 0, len$ = files.length; i$ < len$; ++i$) {
          file = files[i$];
          icon_image = "icon_default.png";
          cls = 'class=""';
          ext = path.extname(file);
          prep = false;
          if (ext === '.html') {
            icon_image = "icon_html.png";
          } else if (ext === '.js') {
            icon_image = "icon_javascript.png";
          } else if (in$(ext, ext_imgs)) {
            icon_image = "icon_image.png";
          } else if (ext === "") {
            cls = 'class="folder"';
            prep = true;
          }
          elem = '<p ' + cls + '><img src="' + icon_image + '">' + file + '</p>';
          if (prep) {
            elresult.prepend(elem);
          } else {
            elresult.append(elem);
          }
        }
        $(elresult).on("mouseenter", "p", function(){
          var filename, ext, imagepath;
          preview.clearQueue();
          filename = $(this).text();
          ext = path.extname(filename);
          if (in$(ext, ext_imgs)) {
            imagepath = path.join(process.cwd(), filename);
            preview.attr('src', imagepath);
            preview.css('right', -preview.outerWidth());
            return preview.animate({
              right: 0
            }, 100);
          }
        });
        $(elresult).on("mouseleave", "p", function(){
          preview.clearQueue();
          return preview.animate({
            right: -preview.outerWidth()
          }, 100);
        });
        if (files.length === 0) {
          return elresult.append('<p><img src="icon_sadface.png"></p>');
        }
      } else if (args[0] === 'cd') {
        process.chdir(args[1]);
        return updateInput(process.cwd());
      } else {
        elresult = $('<p class="result"></p>');
        content.append(elresult);
        console.log('command_' + args[0]);
        app = spawn(args[0]);
        app.on('error', function(error){
          return console.log('error_' + error);
        });
        app.on('exit', function(exit){
          return console.log('exit_' + exit);
        });
        app.on('close', function(close){
          return console.log('close_' + close);
        });
        app.on('disconnect', function(disconnect){
          return console.log('disconnect_' + disconnect);
        });
        app.stdout.on('data', function(data){
          var lines, i$, len$, line, results$ = [];
          console.log('data: ' + data.toString('utf-8'));
          data = data.toString('utf-8');
          lines = split$.call(data, '\n');
          for (i$ = 0, len$ = lines.length; i$ < len$; ++i$) {
            line = lines[i$];
            results$.push(elresult.append('<p>' + line + '</p>'));
          }
          return results$;
        });
        app.stdout.on('readable', function(data){
          return console.log('readable: ', data);
        });
        app.stderr.on('data', function(data){
          var lines, i$, len$, line, results$ = [];
          console.log('error: ' + data.toString('utf-8'));
          lines = split$.call(data.toString('utf-8'), '\n');
          for (i$ = 0, len$ = lines.length; i$ < len$; ++i$) {
            line = lines[i$];
            results$.push(elresult.append('<p>' + line + '</p>'));
          }
          return results$;
        });
        app.stdin.on('drain', function(data){
          return console.log("drain " + data);
        });
        app.stdin.on('finish', function(data){
          return console.log("finish " + data);
        });
        app.stdin.on('pipe', function(data){
          return console.log("pipe " + data);
        });
        return command = function(text){
          app.stdin.write(text);
          return app.stdin.end();
        };
      }
    }
    updateInput(process.cwd());
    input.keypress(function(){
      if (event.which === 13) {
        command(input.val());
        input.val("");
        return $("html, body").animate({
          scrollTop: $(document).height()
        }, "slow");
      }
    });
  });
  function in$(x, xs){
    var i = -1, l = xs.length >>> 0;
    while (++i < l) if (x === xs[i]) return true;
    return false;
  }
}).call(this);
